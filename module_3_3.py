#Задача "Распаковка":
#Функция с параметрами по умолчанию:
#Создайте функцию print_params(a = 1, b = 'строка', c = True), которая принимает три параметра
    # со значениями по умолчанию (например сейчас это: 1, 'строка', True).
#Функция должна выводить эти параметры.
#Вызовите функцию print_params с разным количеством аргументов, включая вызов без аргументов.
#Проверьте, работают ли вызовы print_params(b = 25) print_params(c = [1,2,3])
#Распаковка параметров:
#Создайте список values_list с тремя элементами разных типов.
#Создайте словарь values_dict с тремя ключами, соответствующими параметрам функции print_params, и значениями разных типов.
#Передайте values_list и values_dict в функцию print_params, используя распаковку параметров (* для списка и ** для словаря).
#Распаковка + отдельные параметры:
#Создайте список values_list_2 с двумя элементами разных типов
#Проверьте, работает ли print_params(*values_list_2, 42)
#Примечания:
#Использование параметров по умолчанию позволяет функциям быть гибкими и удобными в использовании.
#Распаковка параметров из списка и словаря позволяет передавать группы значений в функцию, что упрощает работу с данными.
#Важно!
#Не передавайте списки задавая по умолчанию пустой список или другой изменяемый тип данных!
#В таком случае, если этот список будет изменён внутри функции, то на следующий вызов функции он останется в том же состоянии.
#def a(my_list = [])) – это приводит к ошибкам!

#Решение:

def print_params(a = 1, b = 'строка', c = True):
    print(a, b, c)

print_params()
print_params(7)
print_params(34.5)
print_params(b = 25)
print_params(c = [1, 2, 3])

values_list = [7.12, 'Mark', True]
values_dict = {'a': 'date', 'b': 'family', 'c': 'boolean'}
print_params(*values_list)
print_params(**values_dict)

values_list_2 = [54.32, 'Строка']
print_params(*values_list_2, 42)